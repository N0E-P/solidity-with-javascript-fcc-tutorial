{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xae24bdf07068cbc7725253c7f5f75946a31d478331db6f8679df42216e9850ca",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1217985",
    "logsBloom": "0x
    "blockHash": "0xa6e6024283246277149f10c4f7d76879b78997d3b92417480230b81b764b9462",
    "transactionHash": "0xae24bdf07068cbc7725253c7f5f75946a31d478331db6f8679df42216e9850ca",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1217985",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "1"
  ],
  "numDeployments": 1,
  "solcInputHash": "7510a4d35cecce6d2e949323c86c07bf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the chainlink keeper node call. They look for the upkeepNeeded to return true.  \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\n\\r\\nerror Raffle__NotEnoughETHEntered();\\r\\nerror Raffle__TransferFailed();\\r\\nerror Raffle__NotOpen();\\r\\nerror Raffle__UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\r\\n\\r\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\r\\n\\t// Type declarations:\\r\\n\\tenum RaffleState {\\r\\n\\t\\tOPEN,\\r\\n\\t\\tCALCULATING\\r\\n\\t}\\r\\n\\r\\n\\t// State variables :\\r\\n\\tuint256 private immutable i_entranceFee = 100000000000000000;\\r\\n\\taddress payable[] s_players;\\r\\n\\tVRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n\\tbytes32 private immutable i_gasLane = 0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc;\\r\\n\\tuint64 private immutable i_subscriptionId;\\r\\n\\tuint16 private constant REQUEST_CONFIRMATION = 3;\\r\\n\\tuint32 private immutable i_callbackGasLimit = 500000;\\r\\n\\tuint32 private constant NUM_WORDS = 1;\\r\\n\\r\\n\\t//Lottery variables :\\r\\n\\taddress private s_recentWinner;\\r\\n\\tRaffleState private s_raffleState;\\r\\n\\tuint256 private s_lastTimeStamp;\\r\\n\\tuint256 private immutable i_interval = 30;\\r\\n\\r\\n\\t//Events :\\r\\n\\tevent RaffleEnter(address indexed player);\\r\\n\\tevent RequestedRaffleWinner(uint256 indexed requestId);\\r\\n\\tevent WinnerPicked(address indexed winner);\\r\\n\\r\\n\\t//Functions :\\r\\n\\tconstructor(\\r\\n\\t\\taddress vrfCoordinatorV2,\\r\\n\\t\\tuint64 subscriptionId\\r\\n\\t\\t//bytes32 gasLane, // keyHash\\r\\n\\t\\t//uint256 interval,\\r\\n\\t\\t//uint256 entranceFee,\\r\\n\\t\\t//uint32 callbackGasLimit\\r\\n\\t\\t\\r\\n\\t) VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n\\t\\t//i_entranceFee = entranceFee;\\r\\n\\t\\ti_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n\\t\\t//i_gasLane = gasLane;\\r\\n\\t\\ti_subscriptionId = subscriptionId;\\r\\n\\t\\t//i_callbackGasLimit = callbackGasLimit;\\r\\n\\t\\ts_raffleState = RaffleState.OPEN;\\r\\n\\t\\ts_lastTimeStamp = block.timestamp;\\r\\n\\t\\t//i_interval = interval;\\r\\n\\t}\\r\\n\\r\\n\\tfunction enterRaffle() public payable {\\r\\n\\t\\tif (msg.value < i_entranceFee) {\\r\\n\\t\\t\\trevert Raffle__NotEnoughETHEntered();\\r\\n\\t\\t}\\r\\n\\t\\tif (s_raffleState != RaffleState.OPEN) {\\r\\n\\t\\t\\trevert Raffle__NotOpen();\\r\\n\\t\\t}\\r\\n\\t\\ts_players.push(payable(msg.sender));\\r\\n\\t\\temit RaffleEnter(msg.sender);\\r\\n\\t}\\r\\n\\r\\n\\t/**@dev This is the function that the chainlink keeper node call.\\r\\n\\t *They look for the upkeepNeeded to return true.  */\\r\\n\\tfunction checkUpkeep(\\r\\n\\t\\tbytes memory /* checkData */\\r\\n\\t)\\r\\n\\t\\tpublic\\r\\n\\t\\tview\\r\\n\\t\\toverride\\r\\n\\t\\treturns (\\r\\n\\t\\t\\tbool upkeepNeeded,\\r\\n\\t\\t\\tbytes memory /* performData */\\r\\n\\t\\t)\\r\\n\\t{\\r\\n\\t\\tbool isOpen = RaffleState.OPEN == s_raffleState;\\r\\n\\t\\tbool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\r\\n\\t\\tbool hasPlayers = s_players.length > 0;\\r\\n\\t\\tbool hasBalance = address(this).balance > 0;\\r\\n\\t\\tupkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\\r\\n\\t\\treturn (upkeepNeeded, \\\"0x0\\\");\\r\\n\\t}\\r\\n\\r\\n\\tfunction performUpkeep(\\r\\n\\t\\tbytes calldata /* performData */\\r\\n\\t) external override {\\r\\n\\t\\t(bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n\\t\\tif (!upkeepNeeded) {\\r\\n\\t\\t\\trevert Raffle__UpkeepNotNeeded(\\r\\n\\t\\t\\t\\taddress(this).balance,\\r\\n\\t\\t\\t\\ts_players.length,\\r\\n\\t\\t\\t\\tuint256(s_raffleState)\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\t\\ts_raffleState = RaffleState.CALCULATING;\\r\\n\\t\\tuint256 requestId = i_vrfCoordinator.requestRandomWords(\\r\\n\\t\\t\\ti_gasLane,\\r\\n\\t\\t\\ti_subscriptionId,\\r\\n\\t\\t\\tREQUEST_CONFIRMATION,\\r\\n\\t\\t\\ti_callbackGasLimit,\\r\\n\\t\\t\\tNUM_WORDS\\r\\n\\t\\t);\\r\\n\\t\\temit RequestedRaffleWinner(requestId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction fulfillRandomWords(\\r\\n\\t\\tuint256, /*requestId*/\\r\\n\\t\\tuint256[] memory randomWords\\r\\n\\t) internal override {\\r\\n\\t\\tuint256 indexOfWinner = randomWords[0] % s_players.length;\\r\\n\\t\\taddress payable recentWinner = s_players[indexOfWinner];\\r\\n\\t\\ts_recentWinner = recentWinner;\\r\\n\\t\\ts_raffleState = RaffleState.OPEN;\\r\\n\\t\\ts_players = new address payable[](0);\\r\\n\\t\\ts_lastTimeStamp = block.timestamp;\\r\\n\\t\\t(bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\r\\n\\t\\tif (!success) {\\r\\n\\t\\t\\trevert Raffle__TransferFailed();\\r\\n\\t\\t}\\r\\n\\t\\temit WinnerPicked(recentWinner);\\r\\n\\t}\\r\\n\\r\\n\\t//View and pure functions :\\r\\n\\tfunction getEntranceFee() public pure returns (uint256) {\\r\\n\\t\\treturn i_entranceFee;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPlayer(uint256 index) public view returns (address) {\\r\\n\\t\\treturn s_players[index];\\r\\n\\t}\\r\\n\\r\\n\\tfunction getRecentWinner() public view returns (address) {\\r\\n\\t\\treturn s_recentWinner;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getRaffleState() public view returns (RaffleState) {\\r\\n\\t\\treturn s_raffleState;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getNumWords() public pure returns (uint256) {\\r\\n\\t\\treturn NUM_WORDS;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getRequestConfirmations() public pure returns (uint256) {\\r\\n\\t\\treturn REQUEST_CONFIRMATION;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getLastTimeStamp() public view returns (uint256) {\\r\\n\\t\\treturn s_lastTimeStamp;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getInterval() public pure returns (uint256) {\\r\\n\\t\\treturn i_interval;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getNumberOfPlayers() public view returns (uint256) {\\r\\n\\t\\treturn s_players.length;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x403a86bbd8d42dfe87745ece76b07d0d13ba41edb8511f55ee8a07c3658a0466\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61016060405267016345785d8a000060a0908152507fd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc60001b60e0908152506207a12063ffffffff166101209063ffffffff1660e01b815250601e610140908152503480156200006e57600080fd5b506040516200178f3803806200178f83398181016040528101906200009491906200018f565b818073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508067ffffffffffffffff166101008167ffffffffffffffff1660c01b815250506000600160146101000a81548160ff021916908360018111156200014d576200014c6200021e565b5b021790555042600281905550505062000286565b600081519050620001728162000252565b92915050565b60008151905062000189816200026c565b92915050565b60008060408385031215620001a957620001a86200024d565b5b6000620001b98582860162000161565b9250506020620001cc8582860162000178565b9150509250929050565b6000620001e382620001ea565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b6200025d81620001d6565b81146200026957600080fd5b50565b62000277816200020a565b81146200028357600080fd5b50565b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c6101405161148d62000302600039600081816107ec01526108950152600061069b01526000610678015260006106570152600061061b0152600081816102fa01526103f7015260008181610337015261038b015261148d6000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610238578063c1c244e814610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b806353a2c19a146101a45780635f1b0fd8146101cf5780636e04ff0d146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190611093565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190611078565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e6c565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b5061017760048036038101906101729190610d7c565b610564565b005b34801561018557600080fd5b5061018e610763565b60405161019b9190610fb1565b60405180910390f35b3480156101b057600080fd5b506101b961078d565b6040516101c69190611093565b60405180910390f35b3480156101db57600080fd5b506101e461079c565b6040516101f19190611093565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190610dc9565b6107a9565b60405161022f929190610ff5565b60405180910390f35b34801561024457600080fd5b5061024d610891565b60405161025a9190611093565b60405180910390f35b34801561026f57600080fd5b506102786108b9565b6040516102859190611093565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190610e12565b6108c3565b6040516102c29190610fb1565b60405180910390f35b3480156102d757600080fd5b506102e061090a565b6040516102ed9190611093565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de929190610fcc565b60405180910390fd5b6103f18282610916565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104635761046261136d565b5b600160149054906101000a900460ff1660018111156104855761048461136d565b5b146104bc576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061057e604051806020016040528060008152506107a9565b509050806105ed5747600080549050600160149054906101000a900460ff1660018111156105af576105ae61136d565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105e4939291906110ae565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156106125761061161136d565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106dc959493929190611025565b602060405180830381600087803b1580156106f657600080fd5b505af115801561070a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072e9190610e3f565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff1660018111156107d1576107d061136d565b5b600060018111156107e5576107e461136d565b5b14905060007f000000000000000000000000000000000000000000000000000000000000000060025442610819919061118e565b119050600080600080549050119050600080471190508280156108395750835b80156108425750805b801561084b5750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b60008082815481106108d8576108d761139c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106109315761093061139c565b5b602002602001015161094391906112de565b9050600080828154811061095a5761095961139c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109ee576109ed61136d565b5b0217905550600067ffffffffffffffff811115610a0e57610a0d6113cb565b5b604051908082528060200260200182016040528015610a3c5781602001602082028036833780820191505090505b5060009080519060200190610a52929190610b47565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a8090610f9c565b60006040518083038185875af1925050503d8060008114610abd576040519150601f19603f3d011682016040523d82523d6000602084013e610ac2565b606091505b5050905080610afd576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bc0579160200282015b82811115610bbf5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b67565b5b509050610bcd9190610bd1565b5090565b5b80821115610bea576000816000905550600101610bd2565b5090565b6000610c01610bfc8461110a565b6110e5565b90508083825260208201905082856020860282011115610c2457610c23611404565b5b60005b85811015610c545781610c3a8882610d52565b845260208401935060208301925050600181019050610c27565b5050509392505050565b6000610c71610c6c84611136565b6110e5565b905082815260208101848484011115610c8d57610c8c611409565b5b610c9884828561126b565b509392505050565b600082601f830112610cb557610cb46113ff565b5b8135610cc5848260208601610bee565b91505092915050565b60008083601f840112610ce457610ce36113ff565b5b8235905067ffffffffffffffff811115610d0157610d006113fa565b5b602083019150836001820283011115610d1d57610d1c611404565b5b9250929050565b600082601f830112610d3957610d386113ff565b5b8135610d49848260208601610c5e565b91505092915050565b600081359050610d6181611440565b92915050565b600081519050610d7681611440565b92915050565b60008060208385031215610d9357610d92611413565b5b600083013567ffffffffffffffff811115610db157610db061140e565b5b610dbd85828601610cce565b92509250509250929050565b600060208284031215610ddf57610dde611413565b5b600082013567ffffffffffffffff811115610dfd57610dfc61140e565b5b610e0984828501610d24565b91505092915050565b600060208284031215610e2857610e27611413565b5b6000610e3684828501610d52565b91505092915050565b600060208284031215610e5557610e54611413565b5b6000610e6384828501610d67565b91505092915050565b60008060408385031215610e8357610e82611413565b5b6000610e9185828601610d52565b925050602083013567ffffffffffffffff811115610eb257610eb161140e565b5b610ebe85828601610ca0565b9150509250929050565b610ed1816111c2565b82525050565b610ee0816111d4565b82525050565b610eef816111e0565b82525050565b6000610f0082611167565b610f0a8185611172565b9350610f1a81856020860161127a565b610f2381611418565b840191505092915050565b610f3781611259565b82525050565b6000610f4a600083611183565b9150610f5582611429565b600082019050919050565b610f69816111fd565b82525050565b610f788161122b565b82525050565b610f8781611235565b82525050565b610f9681611245565b82525050565b6000610fa782610f3d565b9150819050919050565b6000602082019050610fc66000830184610ec8565b92915050565b6000604082019050610fe16000830185610ec8565b610fee6020830184610ec8565b9392505050565b600060408201905061100a6000830185610ed7565b818103602083015261101c8184610ef5565b90509392505050565b600060a08201905061103a6000830188610ee6565b6110476020830187610f8d565b6110546040830186610f60565b6110616060830185610f7e565b61106e6080830184610f7e565b9695505050505050565b600060208201905061108d6000830184610f2e565b92915050565b60006020820190506110a86000830184610f6f565b92915050565b60006060820190506110c36000830186610f6f565b6110d06020830185610f6f565b6110dd6040830184610f6f565b949350505050565b60006110ef611100565b90506110fb82826112ad565b919050565b6000604051905090565b600067ffffffffffffffff821115611125576111246113cb565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611151576111506113cb565b5b61115a82611418565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006111998261122b565b91506111a48361122b565b9250828210156111b7576111b661130f565b5b828203905092915050565b60006111cd8261120b565b9050919050565b60008115159050919050565b6000819050919050565b60008190506111f88261142c565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000611264826111ea565b9050919050565b82818337600083830152505050565b60005b8381101561129857808201518184015260208101905061127d565b838111156112a7576000848401525b50505050565b6112b682611418565b810181811067ffffffffffffffff821117156112d5576112d46113cb565b5b80604052505050565b60006112e98261122b565b91506112f48361122b565b9250826113045761130361133e565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6002811061143d5761143c61136d565b5b50565b6114498161122b565b811461145457600080fd5b5056fea26469706673582212206f843746a2bac18773b88dba592a5a2359818a5fe33f65ff1a73dfeadc2d989564736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610238578063c1c244e814610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b806353a2c19a146101a45780635f1b0fd8146101cf5780636e04ff0d146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190611093565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190611078565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e6c565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b5061017760048036038101906101729190610d7c565b610564565b005b34801561018557600080fd5b5061018e610763565b60405161019b9190610fb1565b60405180910390f35b3480156101b057600080fd5b506101b961078d565b6040516101c69190611093565b60405180910390f35b3480156101db57600080fd5b506101e461079c565b6040516101f19190611093565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190610dc9565b6107a9565b60405161022f929190610ff5565b60405180910390f35b34801561024457600080fd5b5061024d610891565b60405161025a9190611093565b60405180910390f35b34801561026f57600080fd5b506102786108b9565b6040516102859190611093565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190610e12565b6108c3565b6040516102c29190610fb1565b60405180910390f35b3480156102d757600080fd5b506102e061090a565b6040516102ed9190611093565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de929190610fcc565b60405180910390fd5b6103f18282610916565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104635761046261136d565b5b600160149054906101000a900460ff1660018111156104855761048461136d565b5b146104bc576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061057e604051806020016040528060008152506107a9565b509050806105ed5747600080549050600160149054906101000a900460ff1660018111156105af576105ae61136d565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105e4939291906110ae565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156106125761061161136d565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106dc959493929190611025565b602060405180830381600087803b1580156106f657600080fd5b505af115801561070a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072e9190610e3f565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff1660018111156107d1576107d061136d565b5b600060018111156107e5576107e461136d565b5b14905060007f000000000000000000000000000000000000000000000000000000000000000060025442610819919061118e565b119050600080600080549050119050600080471190508280156108395750835b80156108425750805b801561084b5750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b60008082815481106108d8576108d761139c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106109315761093061139c565b5b602002602001015161094391906112de565b9050600080828154811061095a5761095961139c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109ee576109ed61136d565b5b0217905550600067ffffffffffffffff811115610a0e57610a0d6113cb565b5b604051908082528060200260200182016040528015610a3c5781602001602082028036833780820191505090505b5060009080519060200190610a52929190610b47565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a8090610f9c565b60006040518083038185875af1925050503d8060008114610abd576040519150601f19603f3d011682016040523d82523d6000602084013e610ac2565b606091505b5050905080610afd576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bc0579160200282015b82811115610bbf5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b67565b5b509050610bcd9190610bd1565b5090565b5b80821115610bea576000816000905550600101610bd2565b5090565b6000610c01610bfc8461110a565b6110e5565b90508083825260208201905082856020860282011115610c2457610c23611404565b5b60005b85811015610c545781610c3a8882610d52565b845260208401935060208301925050600181019050610c27565b5050509392505050565b6000610c71610c6c84611136565b6110e5565b905082815260208101848484011115610c8d57610c8c611409565b5b610c9884828561126b565b509392505050565b600082601f830112610cb557610cb46113ff565b5b8135610cc5848260208601610bee565b91505092915050565b60008083601f840112610ce457610ce36113ff565b5b8235905067ffffffffffffffff811115610d0157610d006113fa565b5b602083019150836001820283011115610d1d57610d1c611404565b5b9250929050565b600082601f830112610d3957610d386113ff565b5b8135610d49848260208601610c5e565b91505092915050565b600081359050610d6181611440565b92915050565b600081519050610d7681611440565b92915050565b60008060208385031215610d9357610d92611413565b5b600083013567ffffffffffffffff811115610db157610db061140e565b5b610dbd85828601610cce565b92509250509250929050565b600060208284031215610ddf57610dde611413565b5b600082013567ffffffffffffffff811115610dfd57610dfc61140e565b5b610e0984828501610d24565b91505092915050565b600060208284031215610e2857610e27611413565b5b6000610e3684828501610d52565b91505092915050565b600060208284031215610e5557610e54611413565b5b6000610e6384828501610d67565b91505092915050565b60008060408385031215610e8357610e82611413565b5b6000610e9185828601610d52565b925050602083013567ffffffffffffffff811115610eb257610eb161140e565b5b610ebe85828601610ca0565b9150509250929050565b610ed1816111c2565b82525050565b610ee0816111d4565b82525050565b610eef816111e0565b82525050565b6000610f0082611167565b610f0a8185611172565b9350610f1a81856020860161127a565b610f2381611418565b840191505092915050565b610f3781611259565b82525050565b6000610f4a600083611183565b9150610f5582611429565b600082019050919050565b610f69816111fd565b82525050565b610f788161122b565b82525050565b610f8781611235565b82525050565b610f9681611245565b82525050565b6000610fa782610f3d565b9150819050919050565b6000602082019050610fc66000830184610ec8565b92915050565b6000604082019050610fe16000830185610ec8565b610fee6020830184610ec8565b9392505050565b600060408201905061100a6000830185610ed7565b818103602083015261101c8184610ef5565b90509392505050565b600060a08201905061103a6000830188610ee6565b6110476020830187610f8d565b6110546040830186610f60565b6110616060830185610f7e565b61106e6080830184610f7e565b9695505050505050565b600060208201905061108d6000830184610f2e565b92915050565b60006020820190506110a86000830184610f6f565b92915050565b60006060820190506110c36000830186610f6f565b6110d06020830185610f6f565b6110dd6040830184610f6f565b949350505050565b60006110ef611100565b90506110fb82826112ad565b919050565b6000604051905090565b600067ffffffffffffffff821115611125576111246113cb565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611151576111506113cb565b5b61115a82611418565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006111998261122b565b91506111a48361122b565b9250828210156111b7576111b661130f565b5b828203905092915050565b60006111cd8261120b565b9050919050565b60008115159050919050565b6000819050919050565b60008190506111f88261142c565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000611264826111ea565b9050919050565b82818337600083830152505050565b60005b8381101561129857808201518184015260208101905061127d565b838111156112a7576000848401525b50505050565b6112b682611418565b810181811067ffffffffffffffff821117156112d5576112d46113cb565b5b80604052505050565b60006112e98261122b565b91506112f48361122b565b9250826113045761130361133e565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6002811061143d5761143c61136d565b5b50565b6114498161122b565b811461145457600080fd5b5056fea26469706673582212206f843746a2bac18773b88dba592a5a2359818a5fe33f65ff1a73dfeadc2d989564736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that the chainlink keeper node call. They look for the upkeepNeeded to return true.  "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 197,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 216,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 219,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)191"
      },
      {
        "astId": 221,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)191": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}